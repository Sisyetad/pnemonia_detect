import torch
import torchvision.models as models

# Define and load the model architecture and weights
def load_custom_model():
    model = models.resnet50(weights=None)  # Initialize with no weights
    num_features = model.fc.in_features
    model.fc = torch.nn.Linear(num_features, 2)
    
    # Load the saved weights
    model.load_state_dict(torch.load('resnet_pneumonia_model.pth', map_location=torch.device('cpu')))
    
    model.eval()  # Set the model to evaluation mode
    return model
from PIL import Image
from torchvision import transforms

# Preprocess the input image
def preprocess_image(image_path):
    preprocess = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    image = Image.open(image_path)
    return preprocess(image).unsqueeze(0)  # Add batch dimension

# Use the model to predict
def get_prediction(image_path, model):
    image_tensor = preprocess_image(image_path)
    output = model(image_tensor)
    _, predicted = torch.max(output, 1)  # Get the predicted class
    return predicted.item()  # Return 0 for Normal, 1 for Pneumonia
def load_custom_model():
    model = models.resnet50(weights=None)
    num_features = model.fc.in_features
    model.fc = torch.nn.Linear(num_features, 2)
    model.load_state_dict(torch.load('resnet_pneumonia_model.pth', map_location=torch.device('cpu')))
    model.eval()
    return model